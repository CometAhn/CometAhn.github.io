<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://cometahn.github.io/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cometahn.github.io/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2022-12-25T13:35:31+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/feed.xml</id><title type="html">Comet’s Blog</title><subtitle>공부 정리용 블로그입니다.</subtitle><author><name>CometAhn</name></author><entry><title type="html">데이터셋 row 추가</title><link href="https://cometahn.github.io/jekyll-theme-yat/nexacro/2022/12/25/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-row-%EC%B6%94%EA%B0%80.html" rel="alternate" type="text/html" title="데이터셋 row 추가" /><published>2022-12-25T00:00:00+00:00</published><updated>2022-12-25T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/nexacro/2022/12/25/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B%20row%20%EC%B6%94%EA%B0%80</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/nexacro/2022/12/25/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%85%8B-row-%EC%B6%94%EA%B0%80.html"><![CDATA[<h2 id="design">Design</h2>

<p>콤보박스 cboNumber, CboAlpha 생성.</p>

<p>데이터셋 dsNumber, dsAlpha 생성.</p>
<ul>
  <li>각각의 데이터셋에 0번째 컬럼 생성.</li>
</ul>

<p>각각의 콤보박스에 데이터셋 매핑.</p>

<h2 id="script">Script</h2>

<pre><code class="language-nexacro">this.jsPR_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{	
	
	// 1 ~ 99 데이터가 있는 데이터셋 생성
	for(var i = 0; i&lt;99;i++){
		//i번째 row 생성
		this.dsNumber.addRow(i);
		//i번째째 로우, 0번째 컬럼에 i+1 입력.
		this.dsNumber.setColumn(i, 0, i+1);
	}
	
	// A ~ Z 데이터가 있는 데이터셋 생성
	for(var j = 0; j &lt;26; j++){
		//j번째 row 생성
		this.dsAlpha.addRow(j);
		//j번째째 로우, 0번째 컬럼에 String.fromCharCode(65+j) 입력.
		this.dsAlpha.setColumn(j, 0, String.fromCharCode(65 + j));
	}
	
};
</code></pre>

<h2 id="결과">결과</h2>
<p><img src="/img/nexacro/num.png" alt="number" title="number" /></p>

<p><img src="/img/nexacro/alpha.png" alt="alpha" title="alpha" /></p>]]></content><author><name>CometAhn</name></author><category term="nexacro" /><category term="nexacro" /><category term="javascript" /><summary type="html"><![CDATA[Design]]></summary></entry><entry><title type="html">자바스크립트 기본 개요</title><link href="https://cometahn.github.io/jekyll-theme-yat/javascript/2022/12/25/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EC%9A%94.html" rel="alternate" type="text/html" title="자바스크립트 기본 개요" /><published>2022-12-25T00:00:00+00:00</published><updated>2022-12-25T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/javascript/2022/12/25/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EA%B8%B0%EB%B3%B8%20%EA%B0%9C%EC%9A%94</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/javascript/2022/12/25/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EC%9A%94.html"><![CDATA[<h2 id="자바스크립트-기본-개요">자바스크립트 기본 개요</h2>

<p>자바스크립트는 웹 브라우저에서 동작하는 스크립트 언어이다. 하지만 처음부터 그렇게 웹 개발자에게 친숙한 언어는 아니었다.</p>

<p>초창기 자바스크립트는 웹 페이지 제작에 있어서 보조적인 기능을 수행하기 위한 용도로써 사용했다.</p>

<p>대부분의 로직은 주로 웹 서버에서 실행되었고, 클라이언트인 웹 브라우저에서는 서버로부터 받은 HTML과 CSS, 데이터로 렌더링을 해주는 수준이었다. 이 시절에 자바스크립트는 그다지 중요한 역할을 담당하지 못했다. 다만 소수의 자바스크립트 프로그래머들에 의해 여러 가지 연구가 이루어지고, protoyupe.js와 같은 주요 라이브러리들이 개발된다.</p>

<p>그리고 웹이 더욱 발전하면서, 웹 아키텍처에도 여러 가지 크고 작은 변화가 일어났다. 특히, 과거에 서버에서 담당하던 역할들이 상당 부분 웹 브라우저로 이동하였고, 자바스크립트는 이 변화의 중심에 서게 된다. 게다가 jQuery의 등장으로 보다 쉽게 DOM<code class="language-plaintext highlighter-rouge">Document Object Model</code>을 핸들링하게 되면서 많은 발전을 이루었다.</p>

<h3 id="자바스크립트-활용-범위">자바스크립트 활용 범위</h3>

<ul>
  <li>웹 개발</li>
  <li>서버 개발</li>
  <li>애플리케이션 개발</li>
</ul>

<h3 id="자바스크립트의-핵심-개념">자바스크립트의 핵심 개념</h3>

<h4 id="객체">객체</h4>

<p>자바스크립트의 거의 모든 것은 객체이다. 여기서 ‘거의’라는 표현을 쓰는 이유는 몇 가지가 제외되기 때문이다. 바로 기본 데이터 타입인 boolean, number, string이다. 그리고 특별한 값인 null, undefined도 해당된다. 이를 제외한 나머지는 모두 객체이다. 앞의 세 가지 기본 데이터 타입은 모두 객체처럼 다룰 수도 있다. 그렇기 때문에 자바스크립트는 null과 undefined를 제외한 모든 것을 객체로 다룰 수 있다.</p>

<h4 id="함수">함수</h4>

<p>자바스크립트에서는 함수도 객체로 취급한다. 일반적인 객체보다 조금 더 많은 기능이 있는 객체라고 할 수 있다. 하지만 이렇게 단순히 표현하기엔 자바스크립트에서 함수는 상당히 중요하다. 이는 함수가 일급 객체<code class="language-plaintext highlighter-rouge">First class object</code>로 다뤄지기 때문이다.</p>

<h4 id="프로토타입">프로토타입</h4>

<p>모든 객체는 숨겨진 링크<code class="language-plaintext highlighter-rouge">Link</code>인 프로토타입<code class="language-plaintext highlighter-rouge">Prototype</code>을 가진다. 이 링크는 해당 객체를 생헌한 생성자의 프로토타입 객체를 가리킨다. 이 링크를 ECMAScript에서는 [[Prototype]]이라고 표현한다. 이 링크로 자바스크립트는 훨ㅆ씬 더 다양하게 자신만의 자료 구조를 작성할 수 있다.</p>

<h4 id="실행-컨텍스트와-클로저">실행 컨텍스트와 클로저</h4>

<p>자바스크립트는 자신만의 독특한 과정으로 실행 컨텍스트를 만들고 그 안에서 실행이 이루어진다. 이 실행 컨텍스트는 자신만의 유효 범위<code class="language-plaintext highlighter-rouge">Scope</code>를 갖는데, 이 과정에서 클로저를 구현할 수 있다. 이것은 자바스크립트를 제대로 이해하기 위한 핵심 개념이다.</p>

<h3 id="자바스크립트와-객체지향-프로그래밍">자바스크립트와 객체지향 프로그래밍</h3>

<p>자바스크립트는 클래스를 지원하지 않지만 객체지향 프로그래밍이 가능하다. 프로토타ㅣㅂ 체인과 클로저로 객체지향 프로그래밍에서 제시하는 상속, 캡슐화, 정보 은닉 등의 개념을 소화할 수 있다. 실제로 GOF의 디자인 패턴을 자바스크립트로 구현한 코드들이 많이 공개되어 있고, 많은 개발자의 관심을 받고 있다.</p>

<h3 id="자바스크립트와-함수형-프로그래밍">자바스크립트와 함수형 프로그래밍</h3>

<p>자바스크립트는 함수형 프로그래밍이 가능하다. 함수형 프로그래밍은 높은 수준의 모듈화를 가능케 하는 매우 효율적인 프로그래밍 방법이다. 자바스크립트는 주요 특성인 일급 객체로서의 함수 특성과 클로저를 활용하여 이를 가능케 한다. 하지만 이 때문에, 가독성을 떨어뜨리기도 한다. 과도하게 클로저가 사용되었거나, 함수형 프로그래밍 기법으로 구현된 코드는 제 3자가 해석하기가 상당히 난해하다.</p>

<p>###자바스크립트의 단점</p>

<p>자바스크립트는 굉장히 유연한 언어이고 뛰어난 표현력을 가지고 있다. 하지만 이러한 특성 때문에 종종 디버깅에 어려움을 겪기도 한다. 특히, 느슨한 타입 체크는 개발자에게 타입 체크에 대한 자유를 주지만, 컴파일 타임에서 잡지 못하는 오류는 고스란히 런타임 오류로 발견된다.</p>

<p>또, 자바스크립트를 둘러싼 중요한 논란 중에 하나가 전역 객체의 존재이다. 최상위 레벨의 객체들은 모두 전역 객체 안에 위치하는데, 이는 이름 추돌의 위험성이 있다. 프로그래머는 이 부분에 대해 신경 쓰는 것을 게을리 하면 안 된다.</p>

<p>그 동안 여러 자바스크립트 개발자가 자바스크립트의 언어 명세서인 ECMAScript를 비판해왔다. 1999년에 채택된 ECMAScript 3 버전은 ㅏㅇ당히 모호한 설명이 많다고 한다. 결국 이 모호한 명세서가 자바스크립트 엔진을 구현하는 데 있어서 약간의 차이를 가져왔고, 현재 자바스크립트 프로그래머에게는 브라우저 독립적인 코드를 구현해내는 것이 큰 숙제가 되었다. 다행히 2009년에 ECMAScrript 5 버전이 승인 되었고, 현재는 더 발전된 차기 버전에 대한 논의가 활발하게 이루어지고 있다.</p>

<p><br /><br /></p>

<p><strong>본 게시글은 한빛미디어의 인사이드 자바스크립트(송형주, 고현준)라는 책을 공부하며 작성한 글입니다.</strong></p>]]></content><author><name>CometAhn</name></author><category term="JavaScript" /><category term="javascript" /><summary type="html"><![CDATA[자바스크립트 기본 개요]]></summary></entry><entry><title type="html">ajax로 아이디 중복 검사하기</title><link href="https://cometahn.github.io/jekyll-theme-yat/portfolio/2022/11/22/ajax%EB%A1%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%A4%91%EB%B3%B5-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="ajax로 아이디 중복 검사하기" /><published>2022-11-22T00:00:00+00:00</published><updated>2022-11-22T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/portfolio/2022/11/22/ajax%EB%A1%9C%20%EC%95%84%EC%9D%B4%EB%94%94%20%EC%A4%91%EB%B3%B5%20%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/portfolio/2022/11/22/ajax%EB%A1%9C-%EC%95%84%EC%9D%B4%EB%94%94-%EC%A4%91%EB%B3%B5-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0.html"><![CDATA[<h2 id="1-ajax란">1. Ajax란?</h2>

<p>Ajax(Asynchronous JavaScript and Xml)은 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법이다.</p>

<p>Ajax는 웹 페이지 전체를 다시 리로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있고, 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있다.</p>

<p>이 때 서버와 여러 데이터를 주고 받을 수 있다.</p>

<p>데이터는 JSON, XML(deault), HTMl, Text 등의 방법으로 전송된다.</p>

<h2 id="2-ajax의-장단점">2. Ajax의 장단점</h2>

<h3 id="장점">장점</h3>
<ol>
  <li>
    <p>웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다.</p>
  </li>
  <li>
    <p>웹 페이지가 로드된 후 서버로 데이터 요청을 보내거나 받을 수 있다.</p>
  </li>
  <li>
    <p>다양한 UI(동적 페이지) 구현이 가능하다.</p>
  </li>
</ol>

<h3 id="단점">단점</h3>
<ol>
  <li>
    <p>페이지 이동이 없기 때문에 히스토리 관리가 안된다.</p>
  </li>
  <li>
    <p>반복적인 데이터를 요청하면 느려지거나 작동하지 않게 된다.</p>
  </li>
  <li>
    <p>페이지 이동이 없다는 것은 보안상의 문제도 발생할 수 있다는 것이다.</p>
  </li>
</ol>

<h2 id="3-프로젝트에-적용">3. 프로젝트에 적용</h2>

<h3 id="addmemberjsp"><a href="https://github.com/CometAhn/LibProject/blob/master/src/main/webapp/WEB-INF/views/Library/member/addMember.jsp">addMember.jsp</a></h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id-check</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id</span><span class="dl">'</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">btn click</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">id</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">id</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">아이디를 입력하세요</span><span class="dl">"</span><span class="p">)</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
        <span class="na">type</span><span class="p">:</span><span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">async</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1">http://localhost/Lib/idcheck</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">dataType</span><span class="p">:</span><span class="dl">'</span><span class="s1">text</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:{</span><span class="na">id</span><span class="p">:</span><span class="nx">id</span><span class="p">},</span>
    <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">jsonInfo</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">jsonInfo</span><span class="p">.</span><span class="nx">used</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">no</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.message</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">사용할 수 있는 ID입니다.</span><span class="dl">'</span><span class="p">)</span>
         <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.message</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#id-check</span><span class="dl">'</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="dl">'</span><span class="s1">disabled</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.message</span><span class="dl">'</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.message</span><span class="dl">'</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="dl">'</span><span class="s1">이미 사용 중인 아이디입니다.</span><span class="dl">'</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">},</span>
    <span class="na">error</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">})</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<h3 id="controllerjava"><a href="https://github.com/CometAhn/LibProject/blob/master/src/main/class/library/LibraryController.java">Controller.java</a></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"idcheck"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">idcheck</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="n">request</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
		<span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/html; charset=utf-8"</span><span class="o">);</span>

		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Login</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">list</span> <span class="o">=</span> <span class="n">daoG</span><span class="o">.</span><span class="na">getid</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>

		<span class="c1">//배열을 저장할 jObject</span>
		<span class="nc">JSONObject</span> <span class="n">jObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONObject</span><span class="o">();</span>


		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"아이디 확인용 :"</span> <span class="o">+</span> <span class="n">list</span><span class="o">);</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>

			<span class="n">jObject</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"used"</span><span class="o">,</span> <span class="s">"yes"</span><span class="o">);</span>

			<span class="k">for</span> <span class="o">(</span><span class="nc">Login</span> <span class="n">check</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">jObject</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="n">check</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
			<span class="o">}</span>

		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">jObject</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"used"</span><span class="o">,</span> <span class="s">"no"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">jObject</span><span class="o">);</span>
	<span class="o">}</span>
</code></pre></div></div>

<h3 id="사용-중인-아이디">사용 중인 아이디</h3>
<p><img src="/img/used.png" alt="used" title="used" /></p>

<h3 id="사용-가능한-아이디">사용 가능한 아이디</h3>
<p><img src="/img/use.png" alt="use" title="use" /></p>]]></content><author><name>CometAhn</name></author><category term="portfolio" /><category term="Lib Project" /><category term="portfolio" /><category term="ajax" /><summary type="html"><![CDATA[1. Ajax란?]]></summary></entry><entry><title type="html">댓글 테스트</title><link href="https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/29/%EB%8C%93%EA%B8%80-%ED%85%8C%EC%8A%A4%ED%8A%B8.html" rel="alternate" type="text/html" title="댓글 테스트" /><published>2022-10-29T00:00:00+00:00</published><updated>2022-10-29T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/29/%EB%8C%93%EA%B8%80%20%ED%85%8C%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/29/%EB%8C%93%EA%B8%80-%ED%85%8C%EC%8A%A4%ED%8A%B8.html"><![CDATA[<p>댓글 테스트 포스트입니다.</p>

<p>참고 글 : <a href="https://ansohxxn.github.io/blog/utterances/">https://ansohxxn.github.io/blog/utterances/</a></p>]]></content><author><name>CometAhn</name></author><category term="blog" /><category term="blog" /><summary type="html"><![CDATA[댓글 테스트 포스트입니다.]]></summary></entry><entry><title type="html">7. 추상클래스와 인터페이스, 내부 클래스</title><link href="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/28/7.-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4,-%EB%82%B4%EB%B6%80-%ED%81%B4%EB%9E%98%EC%8A%A4.html" rel="alternate" type="text/html" title="7. 추상클래스와 인터페이스, 내부 클래스" /><published>2022-10-28T00:00:00+00:00</published><updated>2022-10-28T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/java/2022/10/28/7.%20%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4,%20%EB%82%B4%EB%B6%80%20%ED%81%B4%EB%9E%98%EC%8A%A4</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/28/7.-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4,-%EB%82%B4%EB%B6%80-%ED%81%B4%EB%9E%98%EC%8A%A4.html"><![CDATA[<h2 id="1-추상-메서드와-추상-클래스">1. 추상 메서드와 추상 클래스</h2>

<h3 id="추상-메서드">추상 메서드</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">추상 메서드</code>: 선언부만 정의하고 구체적인 내용은 비워놓는 메서드. 구체적인 내용을 적지 않았기 때문에 이를 상속받은 하위 클래스에서는 사용하려면 반드시 구현하라는 의미.</p>

    <pre><code class="language-예제">  abctract void methodA();
</code></pre>
  </li>
</ul>

<h3 id="추상-클래스">추상 클래스</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">추상 클래스</code>: 추상 메서드를 멤버로 가지는 클래스. 추상 클래스는 일반적인 메서드도 가질 수 있지만 추상 메서드를 하나라도 포함하는 클래스다.</p>

    <p>클래스 내부에 추상 메서드가 있다면 반드시 클래스명 앞에 abstract를 붙여아 함.</p>

    <pre><code class="language-예제">  abstract class Cellphone {

      abstract void mmethodA();
  }
</code></pre>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Pokemon</span> <span class="o">{</span>
      <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

      <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">attack</span><span class="o">();</span>

      <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">sound</span><span class="o">();</span>

      <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Pikachu</span> <span class="kd">extends</span> <span class="nc">Pokemon</span> <span class="o">{</span>
      <span class="nc">Pikachu</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"피카츄"</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전기 공격"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kt">void</span> <span class="nf">sound</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"피카 피카!"</span><span class="o">);</span>

      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Squirtle</span> <span class="kd">extends</span> <span class="nc">Pokemon</span> <span class="o">{</span>
      <span class="nc">Squirtle</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"꼬부기"</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kt">void</span> <span class="nf">attack</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"물 공격"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kt">void</span> <span class="nf">sound</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"꼬북 꼬북!"</span><span class="o">);</span>

      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">abstract_</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

          <span class="nc">Pikachu</span> <span class="n">pikachu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pikachu</span><span class="o">();</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이 포켓몬은 :"</span> <span class="o">+</span> <span class="n">pikachu</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
          <span class="n">pikachu</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
          <span class="n">pikachu</span><span class="o">.</span><span class="na">sound</span><span class="o">();</span>
          <span class="nc">Squirtle</span> <span class="n">squirtle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Squirtle</span><span class="o">();</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이 포켓몬은 :"</span> <span class="o">+</span> <span class="n">squirtle</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
          <span class="n">squirtle</span><span class="o">.</span><span class="na">attack</span><span class="o">();</span>
          <span class="n">squirtle</span><span class="o">.</span><span class="na">sound</span><span class="o">();</span>
      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="2-인터페이스interface">2. 인터페이스(interface)</h2>

<h3 id="인터페이스란">인터페이스란?</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">인터페이스</code>: inter(사이의) + face(마주하다)의 합성어. 즉 물체들 사이에서 상호작용을 하기 위한 매개역할을 하는 것.</p>
  </li>
  <li>
    <p>클래스가 설계도라면 인터페이스는 설계할 때 피리요한 목록을 써놓은 종유에 비유함. 종이를 바탕으로 설계도를 작성하듯 프로그래머는 인터페이스를 바탕으로 클래스를 작성함.</p>

    <pre><code class="language-예제">  interface 인터페이스이름{

      public static final 타입 이름 = 값;
      타입 이름 = 값; // 제어자 생략 가능
      public abstract 반환타입 메서드이름(매개변수); // 제어자 생략 가능
      반환타입 메서드이름(매개변수); // 제어자 생략 가능

  }
</code></pre>
  </li>
  <li>
    <p>인터페이스는 상속한다는 말 대신에 구현한다는 말을 사용함. 자손 클래스는 키워드 implements를 사용해서 인터페이스를 구현함. 인터페이스를 구현한 자손 클래스는 오버라이딩을 통하여 인터페이스 내부의 추상 메서드를 구체적으로 구현해야 함.</p>

    <pre><code class="language-예제">  interface A{
      int a = 4;
      void methodA();
      void methodB();
  }

  class B implements A{
      public void methodA(){
          //구체적으로 구현, 오버라이딩
      }
		
      public void methodB(){
          //구체적으로 구현, 오버라이딩
      }
  }
</code></pre>
  </li>
  <li>
    <p>오버라이딩을 할 때는 부모의 접근제어자보다 더 넓거나 같은 범위의 제어자를 사용해야 하므로, public 제어자를 붙이고 오버라딩 해야함.</p>
  </li>
  <li>
    <p>하나의 클래스가 상속을 받으면서 구현을 동시에 할 수도 있음.</p>

    <pre><code class="language-예제">  calss B extends C implements A{

      // C의 멤버
      // A의 멤버
  }
</code></pre>
  </li>
  <li>
    <p>이때 자손 클래스는 부모 클래스의 멤버와 인터페이스의 멤버를 모두 갖게 됨.</p>
  </li>
  <li>
    <p>또한 인터페이스 간에도 상속이 가능함. 클래스는 다중상속이 불가능했지만 인터페이스는 다수의 인터페이스를 구현할 수 있으므로 다중상속이 가능함.</p>

    <pre><code class="language-예제">  interface A{
      void methodA();
  }
  interface B{
      void methodB();
  }
  interface C exteds A,B{

  }
</code></pre>
  </li>
  <li>
    <p>C는 추상 메서드 methodA와 methodB를 멤버로 상속받게 됨. 이때 C는 A와 B를 합친 종합적인 기능을 다루는 인터페이스이다.</p>
  </li>
</ul>

<h3 id="인터페이스의-실제-활용">인터페이스의 실제 활용</h3>

<ul>
  <li>
    <p>인터페이스는 객체 간의 상호작용을 위한 일종의 규악임.</p>
  </li>
  <li>
    <p>A 프로그래머와 B프로그래머가 하나의 프로젝트를 진행했을 때, A 프로그래머와 B 프로그래머가 서로의 클래스가 완성되지 않았어도, 구현해야 할 기능들을 미리 협의하고 반환타입을 정해 놓으면 서로의 작업의 정도와는 무관하게 진행함. 바로 이런 약속과 같은 것이 인터페이스이다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">interface</span> <span class="nc">Providable</span> <span class="o">{</span>

      <span class="kt">void</span> <span class="nf">leisureSports</span><span class="o">();</span>

      <span class="kt">void</span> <span class="nf">sightseeing</span><span class="o">();</span>

      <span class="kt">void</span> <span class="nf">food</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">KoreaTour</span> <span class="kd">implements</span> <span class="nc">Providable</span> <span class="o">{</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leisureSports</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"한강에서 수상스키 투어"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sightseeing</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"경복궁 관람 투어"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">food</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전주 비빔밥 투어"</span><span class="o">);</span>
      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">JapanTour</span> <span class="kd">implements</span> <span class="nc">Providable</span> <span class="o">{</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leisureSports</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"도쿄타워 번지점프 투어"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sightseeing</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"오사카 관람 투어"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">food</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"초밥 투어"</span><span class="o">);</span>

      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">EUTour</span> <span class="kd">implements</span> <span class="nc">Providable</span> <span class="o">{</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leisureSports</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"스카이다이빙 투어"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sightseeing</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"알프스 관람"</span><span class="o">);</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">food</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"피자 투어"</span><span class="o">);</span>

      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">TourGuide</span> <span class="o">{</span>
      <span class="kd">private</span> <span class="nc">Providable</span> <span class="n">tour</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">EUTour</span><span class="o">();</span> <span class="c1">// 인터페이스로 타입 선언</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leisureSports</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">tour</span><span class="o">.</span><span class="na">leisureSports</span><span class="o">();</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sightseeing</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">tour</span><span class="o">.</span><span class="na">sightseeing</span><span class="o">();</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">food</span><span class="o">()</span> <span class="o">{</span>
          <span class="n">tour</span><span class="o">.</span><span class="na">food</span><span class="o">();</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">interface_정리</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

          <span class="nc">TourGuide</span> <span class="n">guide</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TourGuide</span><span class="o">();</span>
          <span class="n">guide</span><span class="o">.</span><span class="na">leisureSports</span><span class="o">();</span>
          <span class="n">guide</span><span class="o">.</span><span class="na">sightseeing</span><span class="o">();</span>
          <span class="n">guide</span><span class="o">.</span><span class="na">food</span><span class="o">();</span>

      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="인터페이스와-다형성">인터페이스와 다형성</h3>

<ul>
  <li>
    <p>특정한 인터페이스를 구현한 인스턴스는 해당 인터페이스 타입의 참조변수로 참조가 가능함.</p>

    <pre><code class="language-예제">  인터페이스명 참조변수이름 = new 클래스명();
</code></pre>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">interface</span> <span class="nc">Camera</span> <span class="o">{</span>

      <span class="kt">void</span> <span class="nf">Photo</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">interface</span> <span class="nc">Call</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">calling</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">interface</span> <span class="nc">Memo</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">write</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">interface</span> <span class="nc">Clock</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">clock</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">MyCellPhone</span> <span class="kd">implements</span> <span class="nc">Camera</span><span class="o">,</span> <span class="nc">Call</span><span class="o">,</span> <span class="nc">Memo</span><span class="o">,</span> <span class="nc">Clock</span> <span class="o">{</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clock</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">calling</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Photo</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">PhoneUser</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="nc">Call</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 인터페이스 Call의 calling 메소드 대입.</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화를 걸었습니다."</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">memo</span><span class="o">(</span><span class="nc">Memo</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 인터페이스 Memo의 memo 메소드 대입.</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"메모 작성."</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">camera</span><span class="o">(</span><span class="nc">Camera</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 인터페이스 Camera의 photo 메소드 대입.</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"카메라 기능 켬."</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">clock</span><span class="o">(</span><span class="nc">Clock</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 인터페이스 Call의 calling 메소드 대입.</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"시간 보기."</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">interface_정리</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

          <span class="c1">// 각 클래스 메소드 : PhoneUser, call();</span>
          <span class="c1">// 각 클래스 메소드 : MyCellPhone : clock();, write();, calling();, Photo();</span>

          <span class="nc">MyCellPhone</span> <span class="n">phone1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCellPhone</span><span class="o">();</span> <span class="c1">// 네 가지 기능 다 가능</span>
          <span class="nc">Camera</span> <span class="n">phone2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCellPhone</span><span class="o">();</span> <span class="c1">// 카메라만 사용가능</span>
          <span class="nc">Call</span> <span class="n">phone3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCellPhone</span><span class="o">();</span> <span class="c1">// 전화만 가능</span>
          <span class="nc">Memo</span> <span class="n">phone4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCellPhone</span><span class="o">();</span> <span class="c1">// 메모만 가능</span>
          <span class="nc">Clock</span> <span class="n">phone5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCellPhone</span><span class="o">();</span> <span class="c1">// 시계만 가능</span>

          <span class="nc">PhoneUser</span> <span class="n">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PhoneUser</span><span class="o">();</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">phone3</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">phone1</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">memo</span><span class="o">(</span><span class="n">phone1</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">memo</span><span class="o">(</span><span class="n">phone4</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">camera</span><span class="o">(</span><span class="n">phone1</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">camera</span><span class="o">(</span><span class="n">phone2</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">clock</span><span class="o">(</span><span class="n">phone1</span><span class="o">);</span>
          <span class="n">user1</span><span class="o">.</span><span class="na">clock</span><span class="o">(</span><span class="n">phone5</span><span class="o">);</span>
      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>하나의 객체를 여러가지 타입으로 참조할 수 있는 것이 다형성임.</p>
  </li>
</ul>

<h2 id="3-내부-클래스">3. 내부 클래스</h2>

<h3 id="내부-클래스란">내부 클래스란?</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">내부 클래스</code>: 어떠한 클래스의 내부에 성생된 클래스. 클래스가 설계도라면 내부 클래스느 큰 틀의 설계도를 완성하기 위한 내부 부품의 설계도.</p>

    <pre><code class="language-예제">  class OuterClass{ // 외부 클래스
      class InnerClass{ // 내부 클래스

      }
  }
</code></pre>
  </li>
  <li>
    <p>내부 클래스를 사용하면 추가적으로 코드를 간결하게 만들 수 있음. 하나의 클래스의 내부에 클래스를 감추어 캡슐화할 수 있게 된다.</p>
  </li>
</ul>

<h3 id="내부-클래스의-종류">내부 클래스의 종류</h3>

<ul>
  <li>인스턴스 클래스</li>
  <li>스태틱 클래스</li>
  <li>지역 클래스</li>
</ul>

<h3 id="내부-클래스의-접근성">내부 클래스의 접근성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` java
class C {

	static class StaticInner {
	}

	class InstanceInner {

	}

	StaticInner st1 = new StaticInner(); // 스태틱 멤버간의 접근 가능
	InstanceInner ii1 = new InstanceInner(); // 인스턴스 멤버간의 접근 가능

	static void StaticMothod() {
		StaticInner st2 = new StaticInner();
		// InstanceInner ii3 = new InstanceInner(); // (error)스태틱 멤버는 인스턴스 멤버에 접근 불가.
	}

	void InstanceMoethod() {
		InstanceInner ii2 = new InstanceInner();
		StaticInner st3 = new StaticInner();// 인스턴스 멤버는 모두 접근 가능.

	}
}

class OuterClass {

	class InnerInstance {// 인스턴스 클래스 : 어떤 클래스에서든 호출이 가능

	}

	static class InnerStatic { // 스태틱 클래스 : 스태틱 내부 클래스 끼리만 호출이 가능

	}

	abstract class Innerinstnace1 { // 내부 클래스 접근성
		abstract void chat();
	}

	private class InnerInstance2 { // 내부 클래스 접근성

	}

	protected class InnerInstance3 { // 내부 클래스 접근성

	}

}

class OuterClass1 {
	int a = 3;
	static int b = 4;

	class Inner { // 인스턴스 클래스는 인스턴스 변수만 가능.
		int c = 5;

		public void innerMethod() {
			System.out.println("&lt;Inner Class&gt;");
		}
	}

	static class StaticInner { // 스태틱 클래스는 인스턴스, 클래스 변수 모두 가능.
		int d = 6; // 인스턴스 변수
		static int stat = 0; // 클래스 변수

		public static void staticMethod() {
			System.out.println("&lt;Static Inner&gt;");
		}

	}
}

//익명 클래스
//일반적인(기존) 방법
class Some { // private int a를 가져오지 못해서 setter 메소드를 만들고, getter에 int a의 값을 받는다.
	private int a = 3;

	int getter() {
		return this.a;
	}

	void setter(int a) {
		this.a = a;
	}

	void a() {
		System.out.println("만듦");
	}
}

public class innerclass정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		OuterClass1 oc = new OuterClass1();

		System.out.println("OuterClass1의 a값 : " + oc.a); // a의 값을 oc인스턴스로 접근
		System.out.println("OuterClass1의 b값 : " + OuterClass1.b); // b는 스태틱변수이므로 클래스 이름 자체로 접근 가능

		System.out.println("\n=== inner 클래스 접근하기 ===");
		OuterClass1 oc2 = new OuterClass1(); // 인스턴스 변수 접근 -&gt; 인스턴스명.변수명 = new 인스턴스명
		OuterClass1.Inner i = oc2.new Inner(); // 인스턴스 변수 접근 -&gt; 인스턴스명.변수명 = new 인스턴스명

		System.out.println("Inner의 c값 = " + i.c);
		i.innerMethod();

		OuterClass1.StaticInner si = new OuterClass1.StaticInner(); // 클래스 변수 접근 -&gt; 클래스명.변수명
		System.out.println("StaticInner의 d값 = " + si.d); // int d가 static int d라면 OuterClass1.StaticInner.d로 가능.

		Ch07_inheritance_N_Polymorphism.OuterClass1.StaticInner.staticMethod();
		OuterClass1.StaticInner.staticMethod(); // 스태틱 클래스의 스태틱 메서드는 클래스의 이름만으로도 참조

		// 익명클래스 :
		// 일반적인(기존) 방법
		Some s1 = new Some();
		s1.setter(4);
		System.out.println(s1.getter());
		s1.a();

		// 익명 클래스
		Some anooy = new Some() { // 인스턴스 생성할 때 블록 안에 클래스 내용 새로 정의
			private int a = 3; // Some클래스 오버라이딩

			int getter() {
				return this.a;
			}

			void setter(int a) {
				this.a = a;
			}

			void a() {
				System.out.println("새로만듦");
			}
		}; // 세미콜론 주의
		anooy.setter(5);
		System.out.println(anooy.getter());
		anooy.a(); // 오버라이딩 재정의

	}

}
```
</code></pre></div></div>

<h3 id="익명-클래스">익명 클래스</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">익명 클래스</code>: 말 그대로 이름이 없는 클래스.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">OuterClass1</span> <span class="c1">// a와 b라는 메서드를 가진 클래스</span>
  <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">a</span><span class="o">(){</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">,</span><span class="n">println</span><span class="o">(</span><span class="s">"metohd a"</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="kt">void</span> <span class="nf">b</span><span class="o">(){}</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Anonymous</span>
  <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
      <span class="o">{</span>
          <span class="nc">OuterClass1</span> <span class="n">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OuterClass1</span><span class="o">()</span>
          <span class="o">{</span>
              <span class="kt">void</span> <span class="nf">a</span><span class="o">(){</span>
                  <span class="c1">// 익명 클래스 안에 있는 메서드는 객체 o를 통해서만 가능하다.</span>
                  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"새롭게 정의한 익명 클래스의 메서드입니다."</span><span class="o">);</span>
              <span class="o">}</span>
          <span class="o">};</span> <span class="c1">// 익명 클래스는 반드시 마지막에 ;를 붙여아 한다.</span>

          <span class="n">o</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// 익명 클래스로 오버라이드한 메서드를 출력</span>
          <span class="nc">OuterClass1</span> <span class="n">ok</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OuterClass1</span><span class="o">();</span>
          <span class="n">ok</span><span class="o">.</span><span class="na">a</span><span class="o">();</span> <span class="c1">// 익명 클래스는 일회용이므로 다시기존의 메서드가 출력.</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <pre><code class="language-실행결과">  새롭게 정의한 익명 클래스의 메서드입니다.
  metohd a
</code></pre>
  </li>
</ul>]]></content><author><name>CometAhn</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[1. 추상 메서드와 추상 클래스]]></summary></entry><entry><title type="html">코드블록 테마, 라인 넘버링, 스크롤 색, 로딩 화면 추가</title><link href="https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/28/%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D-%ED%85%8C%EB%A7%88,-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%83%89,-%EB%A1%9C%EB%94%A9-%ED%99%94%EB%A9%B4-%EC%B6%94%EA%B0%80.html" rel="alternate" type="text/html" title="코드블록 테마, 라인 넘버링, 스크롤 색, 로딩 화면 추가" /><published>2022-10-28T00:00:00+00:00</published><updated>2022-10-28T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/28/%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D%20%ED%85%8C%EB%A7%88,%20%EC%8A%A4%ED%81%AC%EB%A1%A4%20%EC%83%89,%20%EB%A1%9C%EB%94%A9%20%ED%99%94%EB%A9%B4%20%EC%B6%94%EA%B0%80</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/blog/2022/10/28/%EC%BD%94%EB%93%9C%EB%B8%94%EB%A1%9D-%ED%85%8C%EB%A7%88,-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%83%89,-%EB%A1%9C%EB%94%A9-%ED%99%94%EB%A9%B4-%EC%B6%94%EA%B0%80.html"><![CDATA[<p>현재 사용중인 깃 볼르그의 테마에 몇가지 문제점이 있습니다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">{ highlight java linenos }</code>로 코드 넘버 사용 시에만 라인 넘버링 보임.</li>
  <li><code class="language-plaintext highlighter-rouge">{ highlight java linenos }</code>는 ‘```‘와는 달리 사용 시 들여쓰기 안 먹음.</li>
  <li>코드 블록 테마가 맘에 안듦.</li>
</ol>

<p>이런 문제를 해결하기 위해 하이라이트는 이제 그만 사용하고, ‘```’ 사용 시 라인 넘버링 보이도록 수정 및 코드 블록 테마 변경하고 그 외에 스크롤 색 변경과, 로딩화면 추가 하겠습니다.</p>

<h2 id="코드블록-테마">코드블록 테마</h2>

<p>공식 사이트 : <a href="https://highlightjs.org">https://highlightjs.org</a></p>

<p>데모 사이트 : <a href="https://highlightjs.org/static/demo/">https://highlightjs.org/static/demo/</a></p>

<p>원하는 테마를 고르고 html에 추가 해줍니다.</p>

<p>… html</p>
<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/atom-one-dark.min.css" />

<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js"></script>

<script>hljs.initHighlightingOnLoad();</script>

<p>…</p>

<p>저는 기존 테마에서 따로 사용하는 코드 블록 테마가 있길래 그 부분은 지우고 추가했습니다.</p>

<p>기존 css와 충돌이 있어서 수정이 필요했습니다.</p>

<p>저 같은 경우 table 속성이 문제 였는데, 이를 해결하기위해 코드 블록의 table만 table속성을 사용하지 않도록 했습니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">table</span><span class="nd">:not</span><span class="o">(</span><span class="nc">.hljs-ln</span><span class="o">)</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="코드-블록-라인-넘버링">코드 블록 라인 넘버링</h2>

<p>html에 js를 추가해주면 끝입니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span><span class="nx">hljs</span><span class="p">.</span><span class="nx">initLineNumbersOnLoad</span><span class="p">();</span><span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="스크롤-색-변경">스크롤 색 변경</h2>

<p>css만 추가해주면 됩니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">::-webkit-scrollbar</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nd">::-webkit-scrollbar-track</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#f1f1f1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nd">::-webkit-scrollbar-thumb</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#888</span><span class="p">;</span>
<span class="p">}</span>

<span class="nd">::-webkit-scrollbar-thumb:hover</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#555</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="로딩-화면">로딩 화면</h2>

<p>로딩 화면을 띄우고, 로딩이 끝나면 로딩 화면을 없앱니다.</p>

<p>저는 이 gif를 사용하도록 하겠습니다.</p>

<p><img src="/img/loading.gif" alt="loading" title="loading" /></p>

<p>자바스크립트를 하나 만들어줍니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#loading</span><span class="dl">'</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
   <span class="p">});</span>
</code></pre></div></div>

<p>body에 로딩화면을 추가합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
	...
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"loading"</span><span class="nt">&gt;&lt;img</span> <span class="na">id=</span><span class="s">"loading-image"</span> <span class="na">src=</span><span class="s">"/이미지 경로/loading.gif"</span> <span class="na">alt=</span><span class="s">"Loading..."</span> <span class="nt">/&gt;&lt;/div&gt;</span>
	...
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>로딩 화면 css도 추가합니다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/**
  * Loading
  */</span>
<span class="nf">#loading</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.7</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">99</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#loading-image</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">40%</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">45%</span><span class="p">;</span>
  <span class="nl">z-index</span><span class="p">:</span> <span class="m">100</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게하면 전부 끝입니다.</p>

<p>코드 블록 하이라이트를 추가하는데 기존 css와 충돌이 일어나 고치는데 고생했습니다.</p>

<p>그거 말곤 크게 어렵지 않습니다.</p>]]></content><author><name>CometAhn</name></author><category term="blog" /><category term="blog" /><summary type="html"><![CDATA[현재 사용중인 깃 볼르그의 테마에 몇가지 문제점이 있습니다.]]></summary></entry><entry><title type="html">5. 클래스</title><link href="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/5.-%ED%81%B4%EB%9E%98%EC%8A%A4.html" rel="alternate" type="text/html" title="5. 클래스" /><published>2022-10-27T00:00:00+00:00</published><updated>2022-10-27T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/5.%20%ED%81%B4%EB%9E%98%EC%8A%A4</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/5.-%ED%81%B4%EB%9E%98%EC%8A%A4.html"><![CDATA[<h2 id="1-객체지향-언어란">1. 객체지향 언어란?</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">객체지향 언어</code> 현실에서 존재하는 사물과 개념들을 소프트웨어적으로 구현하고, 그 구현된 객체들이 상호작용하여 데이터를 처리하는 방식.</p>
  </li>
  <li>
    <p>객체지향 언어의 특징 :</p>

    <ul>
      <li>코드의 재사용성.</li>
      <li>신뢰성 높은 프로그래밍.</li>
      <li>코드 관리의 편리함.</li>
    </ul>
  </li>
</ul>

<h2 id="2-클래스와-객체">2. 클래스와 객체</h2>

<h3 id="클래스란">클래스란?</h3>

<ul>
  <li>‘클래스’는 객체의 설계도와 같은 역할을 함. 클래스에는 객체의 속성과 기능들이 정의되어 있고 이를 통해서 객체를 생성합니다.</li>
</ul>

<h3 id="인스턴스">인스턴스</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">인스턴스</code>: 클래스를  통해 만들어진 형태.</p>
  </li>
  <li>
    <p>클래스를 통해 객체를 만드는 과정을 <code class="language-plaintext highlighter-rouge">클래스의 인스턴스화</code>라고 함.</p>
  </li>
</ul>

<h3 id="클래스의-사용">클래스의 사용</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` 예제
class 클래스명{
	/* 속성(변수) 작성 */
	/* 기능(메서드) 작성 */
}
```
</code></pre></div></div>

<h2 id="3-인스턴스변수와-클래스변수">3. 인스턴스변수와 클래스변수</h2>

<h3 id="인스턴스-변수">인스턴스 변수</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">인스턴스 변수</code>: 객체마다 가지는 고유한 번수. 인스턴스를 생성할 떼 만들어지며 인스턴스마다 고유의 저장 공간을 가지므로 각각의 다른 값을 가질 수 있음.</p>

    <pre><code class="language-예제">  class Cars{
      int speed; // 인스턴스 변수 선언
                  // 기존의 방식과 동일!
  }

</code></pre>
  </li>
</ul>

<h3 id="클래스-변수">클래스 변수</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">클래스 변수</code>: 모든 인스턴스가 공통된 값을 공유하는 변수. 인스턴스 변수와는 달리 클래스 변수는 인스턴스를 생성하지 않아도 사용할 수 있음.</p>

    <pre><code class="language-예제">  calss Cars{
      static int wheel; // 클래스 변수 선언
  }

</code></pre>
  </li>
</ul>

<h2 id="4-메서드">4. 메서드</h2>

<h3 id="메서드란">메서드란?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">메서드</code>: 함수라고도 불리는 메서드는 특정한 작업이나 논리를 구성하는 코드를 괄호로 묶어 놓은 것. 메서드는 입력 값을 받아서 내부에서 처리하여 결과를 출력 또는 반환하는 역할을 함. 메서드는 한 번 정해놓으면 언제던지 호출할 수 있고 다른 프로그램에서도 사용함. 이러한 재 사용성은 프로그래머에게 상당히 효율적이고 코드의 중복을 피할 수 있게 도와줌.</li>
</ul>

<h3 id="메서드의-사용">메서드의 사용</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` 예제
반환타입 메서드명(타입 변수명, 타입 변수명) {

	// 메서드 내부의 동작
	return 값;
}
```
</code></pre></div></div>

<ul>
  <li>반환타입 : 메서드의 반환 값의 타입을 정해줌.</li>
  <li>메서드명 : 자유롭게 지을 수 있으며 소문자로 시작하는 것이 일반적.</li>
  <li>매개변수 : 메서듸 명의 뒤의 괄호 안에 위치함. 타입과 변수명으로 이루어졌으며 파라미터라고도 불림.</li>
  <li>return문은 메서드 내부의 결과 값을 반환하는 역할을 함. 반환타입이 void인 경우를 제외하고는 반드시 메서드 내부에 return문이 포함되어 있어야함.</li>
</ul>

<h3 id="메서드의-종류">메서드의 종류</h3>

<ul>
  <li>
    <p>메서드도 클래스 메서드와 인스턴스 메서드로 구분됨. 메서드 앞에 static이 붙어있으면 클래스 메서드.</p>

    <pre><code class="language-예제">      boolean powerOn(){} // 인스턴스 메서드
      static boolean wipeOn(){} // 크랠스 메서드
</code></pre>
  </li>
</ul>

<h3 id="클래스-멤버와-인스턴스-멤버간의-참조-및-호출">클래스 멤버와 인스턴스 멤버간의 참조 및 호출</h3>

<ul>
  <li>
    <p>클래스 변수와 클래스 메서드를 클래스 멤버, 인스턴스 변수와 인스턴스 메서드를 인스턴스 멤버라고 부름. 같은 클래스에 속한 멤버들끼리는 인스턴스를 생성하지 않고 변수를 참조하거나 메서드를 호출함. 하지만 클래스 메서드로 인스턴스 멤버들을 참조하는 것은 에러가 발생함. 그 이유는 클래스 멤버가 존재하는 시점은 처음 클래스가 메모리에 올라갈 때인데 이 시점에서 인스턴스 멤버는 존재하지 않기 때문.</p>

    <pre><code class="language-예제">  인스턴스 멤버의 클래스 멤버 사용 -&gt; 가능
  클래스 멤버의 인스턴스 멤버 사용 -? 에러
  인스턴스 멤버의 인스턴스 멤버 사용 -&gt; 가능
  클래스 멤버의 클래스 멤버 사용 -&gt; 가능
</code></pre>
  </li>
</ul>

<h2 id="5-오버로딩">5. 오버로딩</h2>

<ul>
  <li>
    <p>메서드의 이름이 같지만 파라미터가 다른 경우.</p>

    <pre><code class="language-예제">  int sum(int a, int b) {
      return a + b;
  }

  int sum(int a, int b, int c) {
      return a + b + c;
  }
</code></pre>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">Overloading1</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"인자가 둘일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"인자가 셋일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kt">double</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">,</span> <span class="kt">double</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"double 타입일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">;</span>
      <span class="o">}</span>

  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">OverLoading</span> <span class="o">{</span>

      <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"인자가 둘일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"인자가 셋일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">static</span> <span class="kt">double</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">,</span> <span class="kt">double</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"double 타입일 경우 호출됨"</span><span class="o">);</span>
          <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

          <span class="nc">Overloading1</span> <span class="n">overload</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Overloading1</span><span class="o">();</span>

          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">overload</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">overload</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">overload</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mf">2.5</span><span class="o">,</span> <span class="mf">3.5</span><span class="o">,</span> <span class="mf">4.5</span><span class="o">));</span>

          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">(</span><span class="mf">2.5</span><span class="o">,</span> <span class="mf">3.5</span><span class="o">,</span> <span class="mf">4.5</span><span class="o">));</span>

      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>

    <pre><code class="language-실행결과">  인자가 둘일 경우 호출됨
  5
  인자가 셋일 경우 호출됨
  9
  double 타입일 경우 호출됨
  10.5
</code></pre>
  </li>
</ul>

<h2 id="6-생성자">6. 생성자</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">생성자</code>: 인스턴스를 생성할 때 호출되어 인스턴스 변수들을 초기화하는 일종의 메서드. 생성자의 이름은 클래스의 이름과 같으며 생성자에는 리턴 값이 없음.</li>
</ul>

<h3 id="기본-생성자">기본 생성자</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` 예시
클래스이름() {}

class Cellphone{
	String model;s
	String color;
	int capacity;

	Cellphone() {
		/*
			필요한 작업
		*/
	} // 컴파일 시 컴파일러가 자동으로 추가.
}
```
</code></pre></div></div>]]></content><author><name>CometAhn</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[1. 객체지향 언어란?]]></summary></entry><entry><title type="html">6. 상속과 다형성</title><link href="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/6.-%EC%83%81%EC%86%8D%EA%B3%BC-%EB%8B%A4%ED%98%95%EC%84%B1.html" rel="alternate" type="text/html" title="6. 상속과 다형성" /><published>2022-10-27T00:00:00+00:00</published><updated>2022-10-27T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/6.%20%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/27/6.-%EC%83%81%EC%86%8D%EA%B3%BC-%EB%8B%A4%ED%98%95%EC%84%B1.html"><![CDATA[<h2 id="1-상속이란">1. 상속이란?</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">상속</code>: 새로운 클래스를 작성할 때 기존에 존재하는 클래스를 물려 받아 이용. 기존의 클래스가 가진 멤버를 물려받기 때문에 새롭게 작성해야 할 코드의 야이 줄어드는 효과가 있음. 이때 자신의 멤버를 물려주는 클래스를 부모 클래스 또는 조상 클래스라고 하고 상속받는 클래스를 자식 클래스 또는 자손 클래스라고 함.</p>
  </li>
  <li>
    <p>상속할 때는 새롭게 작성할 클래스 선언 부분 뒤에 ‘extends 부모 클래스 이름’을 붙입니다.</p>

    <pre><code class="language-예제">  class Parents{}
  class Child extends Parents{} // Parents 클래스의 멤버들을 상속 받음.
</code></pre>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">breath</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"숨쉬기"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"밥먹기"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"말하기"</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Student</span> <span class="kd">extends</span> <span class="nc">Person</span> <span class="o">{</span> <span class="c1">// 부모 - Person</span>
      <span class="kt">void</span> <span class="nf">learn</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배우기"</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Teacher</span> <span class="kd">extends</span> <span class="nc">Person</span> <span class="o">{</span> <span class="c1">// 부모 - Person</span>

      <span class="kt">void</span> <span class="nf">teach</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"가르치기"</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">chapter7</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

          <span class="nc">Student</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Student</span><span class="o">();</span>
          <span class="n">s1</span><span class="o">.</span><span class="na">breath</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 선언없이 사용 가능.</span>
          <span class="n">s1</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 사용 가능.</span>
          <span class="n">s1</span><span class="o">.</span><span class="na">say</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 사용 가능.</span>
          <span class="n">s1</span><span class="o">.</span><span class="na">learn</span><span class="o">();</span> <span class="c1">// Student의 기능.</span>

          <span class="nc">Teacher</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Teacher</span><span class="o">();</span>
          <span class="n">t1</span><span class="o">.</span><span class="na">breath</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 사용 가능.</span>
          <span class="n">t1</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 사용 가능.</span>
          <span class="n">t1</span><span class="o">.</span><span class="na">say</span><span class="o">();</span> <span class="c1">// 부모에게 상속 받은 기능은 사용 가능.</span>
          <span class="n">t1</span><span class="o">.</span><span class="na">teach</span><span class="o">();</span> <span class="c1">// Teacher의 기능.</span>

      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>

    <pre><code class="language-실행결과">  숨쉬기
  배우기
  밥먹기
  가르치기
</code></pre>
  </li>
</ul>

<h2 id="2-오버라이딩overriding">2. 오버라이딩(Overriding)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">오버라이딩</code>: 자손 클래스에서 부모 클래스로부터 물려받은 메서드를 다시 작성하는 것</p>

    <pre><code class="language-예제">  class Parents {
      void method() {
          // 부모 클래스의 메서드
      }
  }

  class Child extends Parents {
      void method() {
          // w자손 클래스에서 메서드 내용을 재정의
      }
  }
</code></pre>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nc">Students</span> <span class="o">{</span>
      <span class="kt">void</span> <span class="nf">lean</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배우기"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"밥먹기"</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"선생님 안녕하세요."</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">class</span> <span class="nc">Leader</span> <span class="kd">extends</span> <span class="nc">Students</span> <span class="o">{</span>

      <span class="nd">@Override</span> <span class="c1">// Source - Overrrid/Implement Method...</span>
      <span class="kt">void</span> <span class="nf">lean</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="kd">super</span><span class="o">.</span><span class="na">lean</span><span class="o">();</span> <span class="c1">// super : 클래스명 대신에 사용. 부모의 클래스 지칭.</span>
      <span class="o">}</span>

      <span class="nd">@Override</span> <span class="c1">// Source - Overrrid/Implement Method...</span>
      <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>
          <span class="kd">super</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span> <span class="c1">// super : 클래스명 대신에 사용. 부모의 클래스 지칭.</span>
      <span class="o">}</span>

      <span class="nd">@Override</span> <span class="c1">// Source - Overrrid/Implement Method...</span>
      <span class="kt">void</span> <span class="nf">say</span><span class="o">()</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"선생님께 인사."</span><span class="o">);</span> <span class="c1">// say 재정의</span>
      <span class="o">}</span>

  <span class="o">}</span>

  <span class="c1">//this : 클래스명 대신에 사용. 자기 자신의 클래스 지칭.</span>
  <span class="c1">//super :  클래스명 대신에 사용. 부모의 클래스 지칭.</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Overriding</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// TODO Auto-generated method stub</span>

          <span class="nc">Students</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Students</span><span class="o">();</span>
          <span class="nc">Leader</span> <span class="n">l1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Leader</span><span class="o">();</span>

          <span class="n">l1</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span>
          <span class="n">l1</span><span class="o">.</span><span class="na">say</span><span class="o">();</span>

      <span class="o">}</span>

  <span class="o">}</span>
</code></pre></div>    </div>

    <pre><code class="language-실행결과">  밥먹기
  선생님께 인사
</code></pre>
  </li>
</ul>

<h2 id="3-상속과-생성자">3. 상속과 생성자</h2>

<h3 id="super">super()</h3>

<ul>
  <li>부모 클래스의 생성자 호출은 상위 클래스를 위미하는 super라는 키워드에 ()를 붙인 <code class="language-plaintext highlighter-rouge">super()</code>을 통해 이루어짐. 부모 클래스 호출은 무조건 자식 클래스 성생자 첫 줄에 이루어짐. 만약 자식의 생성자 내부에 부모 클래스의 생성자를 딸 ㅗ작성하지 않았다면 자동적으로 컴파일러는 자식 클래스의 생성자 첫 줄에 super();을 추가함.</li>
</ul>

<h3 id="object-클래스">Object 클래스</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Object 클래스</code>: 모든 클래스의 조상인 클래스. 어떤 클래스라도 상속 관계를 따라 거슬러 올라가면 마지막에는 Object 클래스가 있음.</li>
</ul>

<h2 id="4-package와-import">4. Package와 import</h2>

<h3 id="package란">package란?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">package</code>: 클래스를 모아놓은 일종의 집합. 만약 단순한 프로그램이 아니라 규모가 큰 작업을 할 때는 상당히 많은 클래스를 사용함. 이떄 유지보수 및 관리를 용이하게 하기 위해서 관련 있는 클래스끼리 묶어서 분리하는 일종의 디렉터리로서 package를 사용함.</li>
</ul>

<h3 id="import">import</h3>

<ul>
  <li>
    <p>다른 패키지에 있는 클래스를 사용하고 싶을 때 클래스의 이름으로 참조함.</p>

    <pre><code class="language-예제">  import 패키지명.클래스명;

</code></pre>
  </li>
</ul>

<h2 id="5-제어자">5. 제어자</h2>

<h3 id="접근-제어자">접근 제어자</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` 접근제어자
public : 접근 제한이 없음
protected : 같은 패키지 내에서와 자손 클래스에서 접근 가능
default : 같은 패키지 내에서만 접근 가능
private : 같은 클래스 내에서만 접근 가능
```
</code></pre></div></div>

<h3 id="static">static</h3>

<p><code class="language-plaintext highlighter-rouge">statc</code>제어자는 변수나 메서드 앞에 붙어서 이 멤버가 클래스 멤버라는 것을 의미함.</p>

<h3 id="final">final</h3>

<p><code class="language-plaintext highlighter-rouge">fianl</code>은 문자 그대로 ‘종결의’라는 의미를 가짐. <code class="language-plaintext highlighter-rouge">final</code>이 붙으면 내용이나 값을 변경하지 못하게 됨.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` 예제
final 변수 : 값을 더 이상 변경할 수 없는 상수.
final 메서드 : 내용을 더 이상 변경할 수 없는 메서드, 오버라아딩 불가.
final 클래스 : 내용을 더 이상 변경할 수 없는 클래스, 상속 불가.
```
</code></pre></div></div>

<h2 id="6-다형성">6. 다형성</h2>

<h3 id="다형성이란">다형성이란?</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">다형성</code>은 사전적 의미로 ‘여러 형태를 가지는 성질’을 뜻함. 객체지향 개념에서 다형성은 ‘한 가지 타입이 여러 가지 형태의 인스턴스를 가질 수 있다’라는 의미. 특히, 부모 타입 변수에는 모든 자식 인스턴스들이 대입될 수 있는데, 이 점은 객체지향 언어의 중요한 특징 중의 하나입니다.</p>

    <pre><code class="language-예제">  A obj = new B();
  (클래스 B가 A를 상속할 떄)
</code></pre>
  </li>
</ul>

<h3 id="참조변수와-인스턴스-간의-관계">참조변수와 인스턴스 간의 관계</h3>

<ul>
  <li>
    <p>다형성을 이용할 때 중요한 것 중의 하나는 조상 클래스 타입의 참조변수로 자손 인스턴스를 참조하는 것은 가능하지만 그 반대의 경우는 에러가 발생하는 것이다.</p>
  </li>
  <li>
    <p>자손 클래스는 부모 클래스를 상속하면서 부모의 멤버들에 자신의 멤버들을 더해 확장된다. 부모 클래스의 참조변수에서 자손 클래스의 인스턴스를 참조할 때 주의할 점은 부모 클래스의 참조변수로 참조가 불가능한 멤버가 존재한다는 점입니다.</p>
  </li>
</ul>

<h3 id="다형성의-활용">다형성의 활용</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>``` java
/**
*  다향성의 활용.
*  조상 클래스 : Animal
*  자손 클래스 : Lion, Rabbit, Monkey
*  
*  ZooKeeper 클래스 feed 함수는 Animal을 받아서 출력.
*  
*/

package Ch07_inheritance_N_Polymorphism;

class Animal {
	void breath() {
		System.out.println("숨쉬기");
	}
}

class Lion extends Animal { // 동물 클래스를 상속한 사자 클래스
	public String toString() {
		return "사자";
	}
}

class Rabbit extends Animal { // 동물 클래스를 상속한 토끼 클래스
	public String toString() {
		return "토끼";
	}
}

class Monkey extends Animal { // 동물 클래스를 상속한 원숭이 클래스
	public String toString() {
		return "원숭이";
	}
}

class ZooKeeper {
	void feed(Animal animal) { // 사육사 클래스
		System.out.println(animal + "에게 먹이주기");
	}
}

public class Polymorphism4 {

	public static void main(String[] args) {
		ZooKeeper james = new ZooKeeper();
		Animal lion1 = new Lion();
		Animal Rabbit1 = new Rabbit();
		Animal Monkey1 = new Monkey();
		james.feed(lion1);
		james.feed(Rabbit1);
		james.feed(Monkey1);
	}

}
```

``` 실행결과
사자에게 먹이주기
토끼에게 먹이주기
원숭이에게 먹이주기
```
</code></pre></div></div>]]></content><author><name>CometAhn</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[1. 상속이란?]]></summary></entry><entry><title type="html">3. 제어문</title><link href="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/3.-%EC%A0%9C%EC%96%B4%EB%AC%B8.html" rel="alternate" type="text/html" title="3. 제어문" /><published>2022-10-26T00:00:00+00:00</published><updated>2022-10-26T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/3.%20%EC%A0%9C%EC%96%B4%EB%AC%B8</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/3.-%EC%A0%9C%EC%96%B4%EB%AC%B8.html"><![CDATA[<h2 id="조건문">조건문</h2>

<h3 id="if문">if문</h3>

<pre><code class="language-예제">if(조건식)
	// 실행부분
</code></pre>

<ul>
  <li>조건식 : 식의 결과가 참 또는 거짓으로 구분될 수 있는 문장</li>
  <li>실행부분 : 조건식의 결과가 참이면 실행할 문장.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">If_else</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">){</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a는 3보다 큽니다."</span><span class="o">);</span>
		<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"검사가 끝났습니다."</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">a는 3보다 큽니다.
검사가 끝났습니다.
</code></pre>

<h3 id="if-else문">if-else문</h3>

<p><code class="language-plaintext highlighter-rouge">if-else</code>: if문의 구조에서 조건식이 false일 경우에 실행 되는 부분을 추가한 문장.</p>

<pre><code class="language-예제">if(조건식){
	// 참 일때 실행부분
} else {
	// 참이 아닐 때 실행부분
}
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">If_else</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>
		
		<span class="k">if</span><span class="o">(</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">19</span> <span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"성인입니다."</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"성인 요금이 적용됩니다."</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"청소년입니다."</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"청소년 요금이 적용됩니다."</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"결제를 진행해주세요."</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">청소년입니다.
청소년 요금이 적용됩니다.
결제를 진행해주세요.
</code></pre>

<h3 id="if-else-if">if-else if</h3>

<p><code class="language-plaintext highlighter-rouge">if-else if</code>: 조건이 여러 가지일 경우 조건에 따라 각각 다른 작업을 수행하고 싶을 때 사용.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">조건1</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// 조건1이 참이면 실행.</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">조건2</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// 조건2가 참이면 실행.</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">조건3</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// 조건3이 참이면 실행.</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
	<span class="c1">// 위 조건에 해당되지 않으면 실행.</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="중첩-if문">중첩 if문</h3>
<p><code class="language-plaintext highlighter-rouge">중첩 if문</code>: if문의 실행 부분에 다시 if문을 중첩해서 쓰는 문장.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="n">조건1</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// 조건1이 참일 때 실행.</span>
	<span class="k">if</span><span class="o">(</span><span class="n">조건2</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 조건1이 참이고, 조건2가 참이면 실행.</span>
	<span class="o">}</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
	<span class="c1">// 조건 1이 참이 아닐 때 실행.</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="switch문">switch문</h3>

<p><code class="language-plaintext highlighter-rouge">switch문</code>: 하나의 조건식으로 많은 경우의 수를 처리하는 조건문.</p>

<pre><code class="language-예제">switch(조건식){
	case 값1:
		// 조건식의 결과와 값1이 같은 경우 실행.
		break;
	case 값2:
		// 조건식의 결과와 값2이 같은 경우 실행.
		break;
	default:
		// 조건식의 결과와 일치하는 값이 없을 때 실행.
}
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">switch_test</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>

		<span class="kt">int</span> <span class="n">score</span><span class="o">;</span>
		<span class="kt">char</span> <span class="n">grade</span><span class="o">;</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"당신의 성적을 입력하세요 :"</span><span class="o">);</span>
		<span class="nc">Scanner</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="n">score</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>

		<span class="k">switch</span> <span class="o">(</span><span class="n">score</span><span class="o">)</span> <span class="o">{</span>

		<span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'A'</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">9</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'A'</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">8</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">7</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'C'</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'D'</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="k">default</span><span class="o">:</span>
			<span class="n">grade</span> <span class="o">=</span> <span class="sc">'F'</span><span class="o">;</span>

		<span class="o">}</span>

		<span class="k">if</span> <span class="o">(</span><span class="n">score</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"만점입니다."</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"당신의 학점은 "</span> <span class="o">+</span> <span class="n">grade</span> <span class="o">+</span> <span class="s">"입니다."</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>

			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"당신의 학점은 "</span> <span class="o">+</span> <span class="n">grade</span> <span class="o">+</span> <span class="s">"입니다."</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="반복문">반복문</h2>

<h3 id="for문">for문</h3>

<p><code class="language-plaintext highlighter-rouge">for문</code>: 특정한 횟수동안 작업을 반복하고 싶을 때 사용하는 반복분.</p>

<pre><code class="language-예제">for( 초기화; 조건식; 증감식) {
	// 조건식이 참일 때 실행되는 부분.
}
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">For</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">// 1. 1~100 홀수 누적, 2. 누적된 값이 1000미만까지 최종합과 i의 값 구하기.</span>
		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">sum1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

		<span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>

			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>

				<span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">sum1</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
					<span class="n">i1</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"1에서 100 중, 홀수 총합이 1000미만일 때의 최종합은 %d이고 그 때 i는 %d이다."</span><span class="o">,</span> <span class="n">sum1</span><span class="o">,</span> <span class="n">i1</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">1에서 100 중, 홀수 총합이 1000미만일 때의 최종합은 992이고 그 때 i는 62이다.
</code></pre>

<h3 id="while문">while문</h3>
<p><code class="language-plaintext highlighter-rouge">while문</code>: 조건식을 검사하고 조건식이 참이면 반복하고 거짓이면 while문 전체를 벗어남.</p>

<pre><code class="language-예제">while(조건식) {
	// 실행되는 부분
}
</code></pre>

<p>while문을 이용하여 구구단 만들기.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">While</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">// 구구단 i단(a * b)=output</span>
		<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
		<span class="k">while</span> <span class="o">(</span><span class="n">row</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">column</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

			<span class="k">while</span> <span class="o">(</span><span class="n">column</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%3d*%d = %2d,"</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">column</span><span class="o">,</span> <span class="n">row</span> <span class="o">*</span> <span class="n">column</span><span class="o">);</span>
				<span class="n">column</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
			<span class="n">row</span><span class="o">++;</span>
		<span class="o">}</span>

	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">  2*1 =  2,  2*2 =  4,  2*3 =  6,  2*4 =  8,  2*5 = 10,  2*6 = 12,  2*7 = 14,  2*8 = 16,  2*9 = 18,
  3*1 =  3,  3*2 =  6,  3*3 =  9,  3*4 = 12,  3*5 = 15,  3*6 = 18,  3*7 = 21,  3*8 = 24,  3*9 = 27,
  4*1 =  4,  4*2 =  8,  4*3 = 12,  4*4 = 16,  4*5 = 20,  4*6 = 24,  4*7 = 28,  4*8 = 32,  4*9 = 36,
  5*1 =  5,  5*2 = 10,  5*3 = 15,  5*4 = 20,  5*5 = 25,  5*6 = 30,  5*7 = 35,  5*8 = 40,  5*9 = 45,
  6*1 =  6,  6*2 = 12,  6*3 = 18,  6*4 = 24,  6*5 = 30,  6*6 = 36,  6*7 = 42,  6*8 = 48,  6*9 = 54,
  7*1 =  7,  7*2 = 14,  7*3 = 21,  7*4 = 28,  7*5 = 35,  7*6 = 42,  7*7 = 49,  7*8 = 56,  7*9 = 63,
  8*1 =  8,  8*2 = 16,  8*3 = 24,  8*4 = 32,  8*5 = 40,  8*6 = 48,  8*7 = 56,  8*8 = 64,  8*9 = 72,
  9*1 =  9,  9*2 = 18,  9*3 = 27,  9*4 = 36,  9*5 = 45,  9*6 = 54,  9*7 = 63,  9*8 = 72,  9*9 = 81,
</code></pre>

<h3 id="dowhile문">do~while문</h3>
<p><code class="language-plaintext highlighter-rouge">do~while문</code>: 일단 한번은 문장들을 수행하고 그 다음에 조건식을 검사해서 반복문을 결정. 조건의 참/거짓 여부에 관계없이 적어도 한번은 수행됨.</p>

<pre><code class="language-예제">do {
	//실행되는 부분
} while(조건식);
</code></pre>

<p>do~while문을 이용하여 구구단 만들기.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Do_While</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="c1">// do~while문을 이용하여 구구단 만들기</span>
		<span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">column</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

		<span class="k">do</span> <span class="o">{</span>
			<span class="n">row</span><span class="o">++;</span>
			<span class="k">do</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%3d*%d = %2d,"</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">column</span><span class="o">,</span> <span class="n">row</span> <span class="o">*</span> <span class="n">column</span><span class="o">);</span>
				<span class="n">column</span><span class="o">++;</span>

			<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">column</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">);</span>

			<span class="n">column</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>

		<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">row</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">);</span>

	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">  2*2 =  4,  2*3 =  6,  2*4 =  8,  2*5 = 10,  2*6 = 12,  2*7 = 14,  2*8 = 16,  2*9 = 18,
  3*2 =  6,  3*3 =  9,  3*4 = 12,  3*5 = 15,  3*6 = 18,  3*7 = 21,  3*8 = 24,  3*9 = 27,
  4*2 =  8,  4*3 = 12,  4*4 = 16,  4*5 = 20,  4*6 = 24,  4*7 = 28,  4*8 = 32,  4*9 = 36,
  5*2 = 10,  5*3 = 15,  5*4 = 20,  5*5 = 25,  5*6 = 30,  5*7 = 35,  5*8 = 40,  5*9 = 45,
  6*2 = 12,  6*3 = 18,  6*4 = 24,  6*5 = 30,  6*6 = 36,  6*7 = 42,  6*8 = 48,  6*9 = 54,
  7*2 = 14,  7*3 = 21,  7*4 = 28,  7*5 = 35,  7*6 = 42,  7*7 = 49,  7*8 = 56,  7*9 = 63,
  8*2 = 16,  8*3 = 24,  8*4 = 32,  8*5 = 40,  8*6 = 48,  8*7 = 56,  8*8 = 64,  8*9 = 72,
  9*2 = 18,  9*3 = 27,  9*4 = 36,  9*5 = 45,  9*6 = 54,  9*7 = 63,  9*8 = 72,  9*9 = 81,
 10*2 = 20, 10*3 = 30, 10*4 = 40, 10*5 = 50, 10*6 = 60, 10*7 = 70, 10*8 = 80, 10*9 = 90,
</code></pre>

<h3 id="break-continue문">break, continue문</h3>

<p><code class="language-plaintext highlighter-rouge">break문</code>: 반복을 멈추게 함. 반복문을 벗어나서 반복문 다음의 코드를 수행하도록 함.</p>

<p><code class="language-plaintext highlighter-rouge">continue문</code>: 현재의 반복을 뛰어넘고 반복을 진행시킴.</p>

<p>break, continue문을 이용한 랜덤 숫자 맞추기 게임.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RandomNumberGame</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 숫자 맞추기 게임.</span>
		<span class="c1">// 랜덤한 숫자(random) 생성. 랜덤 : 72; 몰?루</span>
		<span class="c1">// ㄴ Math.random() : 0~1 구간에서 소수점의 난수를 생성.</span>
		<span class="c1">// 숫자를 입력하세요 : Scanner input</span>
		<span class="c1">// input이 random보다 작다, 크다, 같다</span>
		<span class="c1">// ㄴ 같을 경우, n번만에 맞췄습니다.</span>
		<span class="c1">// ㄴ 다시 진행 하시겠습니까?((Y/N))</span>
		<span class="c1">// ㄴ Y는 continue, N는 break;</span>
		<span class="c1">// 최소값, 최대값보다 크거나 작을 때 continue 등 그냥 추가.</span>

		<span class="nc">Scanner</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

		<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// user가 입력할 숫자.</span>
		<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 카운트</span>
		<span class="kt">char</span> <span class="n">yn</span><span class="o">;</span> <span class="c1">// 게임 재진행 여부</span>

		<span class="c1">// 사용자가 범위 지정하기</span>
		<span class="kt">int</span> <span class="n">umin</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">umax</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임에서 사용할 최소 범위를 지정해주세요\n"</span><span class="o">);</span>
		<span class="n">umin</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임에서 사용할 최대 범위를 지정해주세요\n"</span><span class="o">);</span>
		<span class="n">umax</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

		<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">umin</span><span class="o">;</span> <span class="c1">// 지정된 최소값</span>
		<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">umax</span><span class="o">;</span> <span class="c1">// 지정된 최대값</span>

		<span class="kt">int</span> <span class="n">random</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">100000</span><span class="o">);</span> <span class="c1">// 랜덤하게 생성할 숫자. (0~많이)</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"랜덤 숫자 생성중\n"</span><span class="o">);</span> <span class="c1">// while문 돌리는 동안 시간걸림</span>

		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">((</span><span class="n">umin</span> <span class="o">&gt;</span> <span class="n">random</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">umax</span> <span class="o">&lt;</span> <span class="n">random</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// 사용자가 지정한 값을 벗어나면.</span>
				<span class="n">random</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">1000000000</span><span class="o">);</span> <span class="c1">// 다시 값 정하기</span>
				<span class="k">continue</span><span class="o">;</span> <span class="c1">// 조건물 탈출</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// 값 안이면</span>
				<span class="k">break</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="c1">// System.out.printf("게임을 시작합니다.\n");</span>
		<span class="c1">// System.out.println(random); // random 테스트</span>
		<span class="c1">// System.out.printf("숫자 테스트%d %d \n", umin, umax); // 숫자 테스트용</span>

		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>

			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"숫자를 입력하세요.\n(%d~%d)\n"</span><span class="o">,</span> <span class="n">min</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>

			<span class="n">num</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
			<span class="cm">/*
			 * if(min&gt;num) { // 최소값보다 입력한 값이 작을 때
			 * System.out.printf("입력한 숫자가 최소값보다 작습니다. 다시 입력해주세요.\n\n"); continue; }
			 * if(max&lt;num) { // 최대값보다 입력한 값이 클 때
			 * System.out.printf("입력한 숫자가 최대값보다 큽니다. 다시 입력해주세요.\n\n"); continue; }
			 */</span>

			<span class="k">if</span> <span class="o">(</span><span class="n">random</span> <span class="o">!=</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 숫자가 다를 때.</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">random</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 랜덤이 더 클 때</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"입력한 숫자가 더 작습니다.\n"</span><span class="o">);</span>
					<span class="n">min</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
					<span class="n">min</span> <span class="o">=</span> <span class="n">min</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
					<span class="n">cnt</span><span class="o">++;</span>
					<span class="k">continue</span><span class="o">;</span>

				<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">random</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 랜덤이 더 작을 때</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"입력한 숫자가 더 큽니다.\n"</span><span class="o">);</span>
					<span class="n">max</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
					<span class="n">max</span> <span class="o">=</span> <span class="n">max</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
					<span class="n">cnt</span><span class="o">++;</span>
					<span class="k">continue</span><span class="o">;</span>

				<span class="o">}</span>

			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"정답입니다! %d회에 맞췄습니다.\n"</span><span class="o">,</span> <span class="n">cnt</span><span class="o">);</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임을 다시 진행하시겠습니까?(Y/N)\n"</span><span class="o">);</span>

				<span class="n">yn</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// char n글자 따기 : .next().charAt(n);</span>

				<span class="k">if</span> <span class="o">((</span><span class="n">yn</span> <span class="o">==</span> <span class="sc">'Y'</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">yn</span> <span class="o">==</span> <span class="sc">'y'</span><span class="o">))</span> <span class="o">{</span>

					<span class="n">random</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">90</span> <span class="o">+</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 다시 랜덤하게.</span>
					<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 카운트 초기화</span>
					<span class="n">min</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">// 최소값 초기화</span>
					<span class="n">max</span> <span class="o">=</span> <span class="mi">99</span><span class="o">;</span> <span class="c1">// 최대값 초기화</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임을 다시 진행합니다...\n\n\n"</span><span class="o">);</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임을 시작합니다.\n"</span><span class="o">);</span>

					<span class="k">continue</span><span class="o">;</span>

				<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">((</span><span class="n">yn</span> <span class="o">==</span> <span class="sc">'N'</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">yn</span> <span class="o">==</span> <span class="sc">'n'</span><span class="o">))</span> <span class="o">{</span>
					<span class="c1">// random = (int)(Math.random()*90+10); // 다시 랜덤하게. 굳이?</span>
					<span class="c1">// cnt = 0; // 카운트 초기화</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"게임이 종료됩니다...\n"</span><span class="o">);</span>
					<span class="k">break</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span> <span class="c1">// while 종료</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">게임에서 사용할 최소 범위를 지정해주세요
1
게임에서 사용할 최대 범위를 지정해주세요
10
랜덤 숫자 생성중
숫자를 입력하세요.
(1~10)
5
입력한 숫자가 더 큽니다.
숫자를 입력하세요.
(1~4)
2
정답입니다! 1회에 맞췄습니다.
게임을 다시 진행하시겠습니까?(Y/N)
n
게임이 종료됩니다...
</code></pre>]]></content><author><name>CometAhn</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[조건문]]></summary></entry><entry><title type="html">4. 배열</title><link href="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/4.-%EB%B0%B0%EC%97%B4.html" rel="alternate" type="text/html" title="4. 배열" /><published>2022-10-26T00:00:00+00:00</published><updated>2022-10-26T00:00:00+00:00</updated><id>https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/4.%20%EB%B0%B0%EC%97%B4</id><content type="html" xml:base="https://cometahn.github.io/jekyll-theme-yat/java/2022/10/26/4.-%EB%B0%B0%EC%97%B4.html"><![CDATA[<h2 id="1-배열이란">1. 배열이란?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">배열</code>은 같은 타입의 변수를 하나의 묶음으로 관리. 변수가 하나의 데이터만 저장할 수 있다면 배열은 여러 개의 데이터를 저장하고 효율적으로 관리함.</li>
</ul>

<pre><code class="language-예제">//배열을 사용하지 않을 경우
int a1, a2, a3, ... a50, ... a100;

//배열을 사용할 경우
int[] a = new int[100];
</code></pre>

<h2 id="2-배열의-사용">2. 배열의 사용</h2>

<h3 id="배열의-선언과-생성">배열의 선언과 생성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 배열 선언</span>
<span class="n">타입</span><span class="o">[]</span> <span class="n">배열이름</span><span class="o">;</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">stuendt</span><span class="o">;</span>
<span class="nc">String</span><span class="o">[]</span> <span class="n">name</span><span class="o">;</span>

<span class="c1">// 길이 생성</span>
<span class="n">배열이름</span> <span class="o">=</span> <span class="k">new</span> <span class="n">타입</span><span class="o">[</span><span class="n">길이</span><span class="o">];</span>
<span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">30</span><span class="o">];</span>
<span class="n">name</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

<span class="c1">// 배열 선언과 생성</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
<span class="nc">Stirng</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</code></pre></div></div>

<h3 id="배열의-길이와-인덱스">배열의 길이와 인덱스</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">인덱스</code>: 배열의 공간마다 붙여진 번호. 0번부터 시작함.</p>

    <p>예를들어 길이가 3인 배열 a을 선언했다면 a[0], a[1], a[2]가 된다.</p>
  </li>
</ul>

<h3 id="배열의-초기화와-출력">배열의 초기화와 출력</h3>

<ul>
  <li>test</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Array_1</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="kt">int</span><span class="o">[]</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"현재 자동으로 초기화 된 값:"</span> <span class="o">+</span> <span class="n">student</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>

		<span class="n">student</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
		<span class="n">student</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
		<span class="n">student</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"현재 첫 번째 요소의 값 = "</span> <span class="o">+</span> <span class="n">student</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>

		<span class="c1">// 길이가5인 배열 생성, 배열 길이 생략</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">25</span><span class="o">,</span> <span class="mi">18</span> <span class="o">};</span>

		<span class="c1">// 길이가 7인 배열 생성 new int는 생략 가능.</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span> <span class="o">};</span>

		<span class="c1">// for문으로 배열 초기화</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
		<span class="c1">// 배열 길이를 10으로</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
		<span class="o">}</span>

		<span class="c1">// for문을 이용한 출력</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">c</span><span class="o">));</span>

	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">현재 자동으로 초기화 된 값:0
현재 첫 번째 요소의 값 = 10
0123456789
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>

<h2 id="3-다차원-배열">3. 다차원 배열</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">다차원 배열</code>: 많은 데이터를 ㅕㄴ하게 관리하기 위해 귀조화시키는 것으로 2차원 이상의 배열을 다차원 배열이라고 함.</li>
</ul>

<h3 id="2차원-배열의-선언과-생성">2차원 배열의 선언과 생성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">타입</span><span class="o">[][]</span> <span class="n">배열이름</span><span class="o">;</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="n">student</span><span class="o">;</span>
<span class="nc">String</span><span class="o">[][]</span> <span class="n">name</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>2차원 배열을 생성할 때는 첫 번째 괄호에 들어가는 수는 2차원 배열의 행이 되고 두 번째 괄호에 들어가는 수는 2차원 배열의 열이 됨.</li>
</ul>

<h3 id="2차원-배열의-인덱스">2차원 배열의 인덱스</h3>

<ul>
  <li>
    <p>2차원 배열은 행과 열로 구성됨.</p>

    <p>int[][] sudent = new int[3][4];</p>

    <table>
      <tbody>
        <tr>
          <td>student[0][0]</td>
          <td>student[0][1]</td>
          <td>student[0][2]</td>
          <td>student[0][3]</td>
        </tr>
        <tr>
          <td>student[1][0]</td>
          <td>student[1][1]</td>
          <td>student[1][2]</td>
          <td>student[1][3]</td>
        </tr>
        <tr>
          <td>student[2][0]</td>
          <td>student[2][1]</td>
          <td>student[1][2]</td>
          <td>student[2][3]</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>student[1][2] = 30; // 2행 3열에 30 저장.</p>
  </li>
</ul>

<h3 id="2차원-배열의-초기화와-출력">2차원 배열의 초기화와 출력</h3>

<ul>
  <li>2차원 배열을 초기화할 때는 행을 구분하기 위해 괄호를 한 번 더 사용함. 내부에 들어있는 묶음 중에 첫 번째 묶음이 1행, 두 번째 묶음이 2행</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[][]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span>
		<span class="o">{</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">,</span> <span class="mi">300</span><span class="o">},</span>
		<span class="o">{</span><span class="mi">400</span><span class="o">,</span> <span class="mi">500</span><span class="o">,</span> <span class="mi">600</span><span class="o">},</span>
		<span class="o">{</span><span class="mi">700</span><span class="o">,</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">900</span><span class="o">},</span>
		<span class="o">{</span><span class="mi">200</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="mi">500</span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="4-배열다루기">4. 배열다루기</h2>

<h3 id="배열의-복사">배열의 복사</h3>

<ul>
  <li>System.arraycopy() 메서드</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>System.arraycopy(src, srcPos, destPos, length);

	1. src : 복사할 배열, 2. srcPos : 복사를 하기 시작할 인덱스
	3. dest : 덮어쓸 배열, 4. destPos : 덮어쓰기 시작할 인덱스
	5. length : 복사할 길이
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayCopy</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">};</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span> <span class="o">};</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">b</span><span class="o">));</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<pre><code class="language-실행결과">[1, 2, 3, 4, 5, 6]
0, 0, 0, 0, 0, 0, 0]
[0, 3, 4, 5, 6, 0, 0]
</code></pre>

<h3 id="foreach">foreach</h3>

<ul>
  <li>자바에서는 배열을 순활할 때 기존의 반복문보다 편리한 작업을 할 수 있도록 <code class="language-plaintext highlighter-rouge">foreach문</code>을 제공함.</li>
</ul>

<pre><code class="language-예시">for(배열의타입 변수이름 : 배열이름)
	// 실행 구문
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Array_5_Foreach</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="c1">// string</span>
		<span class="nc">String</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"one"</span><span class="o">,</span> <span class="s">"two"</span><span class="o">,</span> <span class="s">"three"</span> <span class="o">};</span>

		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 기존</span>
			<span class="c1">// System.out.println(numbers[i]);</span>
		<span class="o">}</span>

		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">i</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// foreach</span>
			<span class="c1">// System.out.println(i);</span>
		<span class="o">}</span>

		<span class="c1">// int</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">number</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span> <span class="o">};</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// System.out.println(j);</span>
		<span class="o">}</span>

		<span class="c1">// 홀수만</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">numberodd</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span> <span class="o">};</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="n">numberodd</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// System.out.println(j);</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="c1">// 짝수만</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">numbereven</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span> <span class="o">};</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">:</span> <span class="n">numbereven</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span><span class="c1">// 0이 아닐 때</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>CometAhn</name></author><category term="JAVA" /><category term="JAVA" /><summary type="html"><![CDATA[1. 배열이란?]]></summary></entry></feed>